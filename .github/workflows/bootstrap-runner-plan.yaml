---
name: üöÄ Terraform Plan (bootstrap-runner)

on:
  repository_dispatch:
    types: [terraform-bootstrap-runner]
  workflow_dispatch:

jobs:
  bootstrap-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner
      RUNNER_ENV: github-ci
      VAULT_VERSION: 1.15.5
      TOFU_VERSION: 1.6.2

    steps:
      - name: ü•¶ Checkout repo
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: üß† Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: üåê Start Tailscale (GitHub-hosted)
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: üåê Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      # - name: üíæ Restore CLI cache
      #   uses: actions/cache@v3
      #   id: cli-cache
      #   with:
      #     path: |
      #       ~/.opentofu
      #       /usr/local/bin/vault
      #     key: ${{ runner.os }}-cli-cache-vault-${{ env.VAULT_VERSION }}-tofu-${{ env.TOFU_VERSION }}      

      - name: üõ† Install OpenTofu & Vault CLI
#        if: steps.cli-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
      
          echo "üì¶ Installing Vault CLI v${VAULT_VERSION}..."
          curl -fsSL https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip -o vault.zip
          unzip -q vault.zip
          sudo install vault /usr/local/bin
          vault --version
      
          echo "üì¶ Installing OpenTofu v${TOFU_VERSION}..."
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version $TOFU_VERSION
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV
          tofu version        

      - name: üîì Authenticate to Vault
        env:
          VAULT_ROLE: bootstrap-runner-ci
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: üîê Fetch secrets & write tfvars files
        run: |
          set -euo pipefail
      
          mkdir -p "$ENV_PATH"
          : > "$ENV_PATH/vault.auto.tfvars"
          : > "$ENV_PATH/backend-consul.hcl"
          : > "$ENV_PATH/terraform.auto.tfvars"
      
          VAULT_PREFIX="kv/home-ops/environment/homelab/$ENV_NAME/secrets"
      
          echo "üîê Fetching Vault secrets..."
      
          for SECRET in proxmox_api_token consul_state_locking_token consul_state_locking_path; do
            VAL=$(vault kv get -field=value "$VAULT_PREFIX/$SECRET" || true)
      
            if [[ -z "$VAL" ]]; then
              echo "::warning::Vault key $SECRET returned empty or not found"
              continue
            fi
      
            case $SECRET in
              proxmox_api_token)
                echo "::add-mask::$VAL"
                printf '%s = "%s"\n' "$SECRET" "$VAL" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
              consul_state_locking_token)
                echo "::add-mask::$VAL"
                echo "CONSUL_HTTP_TOKEN=$VAL" >> $GITHUB_ENV
                ;;
              consul_state_locking_path)
                echo "path = \"$VAL\"" >> "$ENV_PATH/backend-consul.hcl"
                ;;
            esac
          done
      
          echo "üîê Fetching global Vault secrets..."
      
          PROXMOX_API_URL=$(vault kv get -field=value kv/home-ops/global/proxmox/api_url)
          echo "::add-mask::$PROXMOX_API_URL"
          echo "proxmox_api_url = \"$PROXMOX_API_URL\"" >> "$ENV_PATH/vault.auto.tfvars"
      
          CONSUL_DOMAIN=$(vault kv get -field=value kv/home-ops/global/consul/domain | sed 's:/*$::')
          echo "address = \"$CONSUL_DOMAIN\"" >> "$ENV_PATH/backend-consul.hcl"
          echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV
      
          VM_CONFIG=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/opentofu/terraform-auto-tfvars)
          echo "$VM_CONFIG" | while IFS= read -r line; do echo "::add-mask::$line"; done
          echo "$VM_CONFIG" >> "$ENV_PATH/terraform.auto.tfvars"          

      - name: üîê Pull Proxmox SSH creds from Vault
        run: |
          set -euo pipefail

          echo "üîë Fetching Proxmox SSH user"
          PROXMOX_USER=$(vault kv get -field=value kv/home-ops/global/proxmox/proxmox_ssh_user)
          echo "::add-mask::$PROXMOX_USER"
          echo "proxmox_ssh_user = \"$PROXMOX_USER\"" >> "$ENV_PATH/vault.auto.tfvars"

          echo "üîë Fetching Proxmox SSH private key"
          PROXMOX_SSH_KEY=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/proxmox_ssh_key_private)
          echo "$PROXMOX_SSH_KEY" | while read -r line; do echo "::add-mask::$line"; done
          echo "$PROXMOX_SSH_KEY" > "$ENV_PATH/proxmox.key"
          chmod 600 "$ENV_PATH/proxmox.key"

          echo "proxmox_ssh_private_key = \"proxmox.key\"" >> "$ENV_PATH/vault.auto.tfvars"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
      - name: üßä Run secure tofu plan and store in Vault
        run: bash ./.scripts/cicd/plan-to-vault.sh
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
          ENV_PATH: ${{ env.ENV_PATH }}
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          VAULT_PLAN_PATH: kv/home-ops/environment/homelab/${{ env.ENV_NAME }}/opentofu/plans/staging

      - name: üöì Create or update Terraform Plan PR
        run: |
          set -euo pipefail

          BRANCH="plan-${ENV_NAME}"
          SIGNAL_FILE=".ci-signals/.plan-${ENV_NAME}"
          TEMPLATE_PATH="kv/home-ops/environment/homelab/${ENV_NAME}/opentofu/plans/staging"
          TIMESTAMP="$(TZ='America/Chicago' date +"%B %d, %Y @ %-I:%M %p CT")"

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          echo "üîÑ Pulling latest main..."
          git pull --rebase origin main || echo "‚ö†Ô∏è Rebase not needed or harmless failure."

          echo "üîç Checking if branch exists..."
          if git ls-remote --exit-code --heads origin "$BRANCH"; then
            echo "‚úÖ Branch exists. Fetching..."
            git fetch origin "$BRANCH"
            git checkout "$BRANCH"
          else
            echo "‚ûï Creating new branch $BRANCH"
            git checkout -b "$BRANCH"
          fi

          echo "üõ†Ô∏è Writing signal file..."
          mkdir -p .ci-signals
          VERSION=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/metadata/home-ops/environment/homelab/${ENV_NAME}/opentofu/plans/staging" | jq -r '.data.current_version // "unknown"')
          echo "${TEMPLATE_PATH} - Generated at $TIMESTAMP (version $VERSION)" > "$SIGNAL_FILE"

          git add "$SIGNAL_FILE"
          git commit -m "üöì Plan signal for ${ENV_NAME}" || echo "‚ÑπÔ∏è Nothing new to commit."
          git push origin "$BRANCH" || echo "‚ÑπÔ∏è Nothing to push."

          echo "üîç Checking for existing PR..."
          PR_NUMBER=$(gh pr list --head "$BRANCH" --json number --jq '.[0].number' || echo "")

          PR_BODY=$(
            echo "### üöì Terraform Plan for \`${ENV_NAME}\`"
            echo ""
            echo "| Component | Path | Version |"
            echo "|-----------|------|---------|"
            echo "| ${ENV_NAME} | \`${TEMPLATE_PATH}\` | \`${VERSION}\` |"
            echo ""
            echo "---"
            echo ""
            echo "### üîê Secure Plan Retrieval"
            echo ""
            echo "Use the following to view the stored plan:"
            echo ""
            echo '```bash'
            echo "vault kv get -field=plan -version=${VERSION} ${TEMPLATE_PATH} | base64 -d | less"
            echo '```'
            echo ""
            echo "---"
            echo ""
            echo "- üïì **Generated**: ${TIMESTAMP}"
            echo "- ‚úÖ **Merge** this PR to trigger apply"
            echo "- üîÅ **Automerge**: Disabled"
            echo "- üîï **Ignore**: Close this PR to skip"
            echo ""
            echo "<sub>Generated by OpenTofu CI/CD</sub>"
          )

          if [ -n "$PR_NUMBER" ]; then
            echo "‚úÖ PR already exists. Updating..."
            gh pr edit "$PR_NUMBER" --title "üöì Plan for ${ENV_NAME}" --body "$PR_BODY" --add-label "renovate/vm"
          else
            echo "‚ûï Creating new PR..."
            gh pr create \
              --title "üöì Plan for ${ENV_NAME}" \
              --body "$PR_BODY" \
              --head "$BRANCH" \
              --base main \
              --label "renovate/vm"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          VAULT_ADDR: ${{ env.VAULT_ADDR }}          

      - name: üßº Cleanup
        if: always()
        run: |
          rm -f vault.json install-opentofu.sh ${{ env.ENV_PATH }}/proxmox.key || true
          rm -f ${{ env.ENV_PATH }}/vault.auto.tfvars ${{ env.ENV_PATH }}/terraform.auto.tfvars ${{ env.ENV_PATH }}/backend-consul.hcl || true
