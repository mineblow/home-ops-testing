---
name: üöÄ Terraform Plan (bootstrap-runner)

on:
  repository_dispatch:
    types: [terraform-bootstrap-runner]
  workflow_dispatch:

jobs:
  bootstrap-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      pull-requests: write
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner

    steps:
      - name: ü•¶ Checkout repo
        uses: actions/checkout@v4

      - name: üîê Auth to GCP & Fetch Vault Bootstrap
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}" > gcp-creds.json
          gcloud auth activate-service-account --key-file=gcp-creds.json

          RAW=$(gcloud secrets versions access latest --secret=vault_bootstrap)
          export VAULT_ADDR=$(echo "$RAW" | jq -r .vault_addr)
          export VAULT_ROLE=$(echo "$RAW" | jq -r .vault_role)
          export CLIENT_ID=$(echo "$RAW" | jq -r .oauth_client_id)
          export CLIENT_SECRET=$(echo "$RAW" | jq -r .oauth_client_secret)

          echo "::add-mask::$VAULT_ADDR"
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"

          echo "VAULT_ADDR=$VAULT_ADDR" >> "$GITHUB_ENV"
          echo "VAULT_ROLE=$VAULT_ROLE" >> "$GITHUB_ENV"
          echo "TAILSCALE_CLIENT_ID=$CLIENT_ID" >> "$GITHUB_ENV"
          echo "TAILSCALE_CLIENT_SECRET=$CLIENT_SECRET" >> "$GITHUB_ENV"

      - name: üåê Start Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: üîì Authenticate to Vault
        run: |
          JWT=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r .value)

          VAULT_TOKEN=$(curl -s --request POST \
            --data "{\"jwt\":\"$JWT\",\"role\":\"${VAULT_ROLE}\"}" \
            "$VAULT_ADDR/v1/auth/jwt/login" | jq -r .auth.client_token)

          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: üîê Fetch secrets & write config
        run: |
          set -euo pipefail
          > vault.auto.tfvars
          > backend-consul.hcl

          declare -A PROXMOX=(
            ["proxmox_api_url"]="api_url"
            ["proxmox_api_token"]="automation_full_token"
          )
          for VAR in "${!PROXMOX[@]}"; do
            VAL=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
              "$VAULT_ADDR/v1/kv/data/home-ops/proxmox/${PROXMOX[$VAR]}" \
              | jq -r '.data.data.value // empty')
            echo "$VAR = \"$VAL\"" >> vault.auto.tfvars
          done

          LOCK_PATH=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/bootstrap-runner/consul/state_locking_path" \
            | jq -r '.data.data.value')

          LOCK_TOKEN=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/bootstrap-runner/consul/state_locking_token" \
            | jq -r '.data.data.value')

          CONSUL_DOMAIN=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/kv/data/home-ops/consul/domain" \
            | jq -r '.data.data.value' | sed 's:/*$::')

          echo "address = \"$CONSUL_DOMAIN\"" >> backend-consul.hcl
          echo "path    = \"$LOCK_PATH\"" >> backend-consul.hcl

          export CONSUL_HTTP_ADDR="$CONSUL_DOMAIN"
          export CONSUL_HTTP_TOKEN="$LOCK_TOKEN"

      - name: üì¶ Tofu Init
        working-directory: ${{ env.ENV_PATH }}
        run: tofu init -backend-config=../../backend-consul.hcl -reconfigure

      - name: üßä Tofu Plan
        working-directory: ${{ env.ENV_PATH }}
        run: tofu plan -no-color -out=tfplan

      - name: üíæ Save tfplan to Vault
        run: |
          B64=$(base64 -w 0 "${{ env.ENV_PATH }}/tfplan")
          HASH=$(sha256sum "${{ env.ENV_PATH }}/tfplan" | awk '{print $1}')
          CREATED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          JSON=$(jq -n \
            --arg plan "$B64" \
            --arg commit "${{ github.sha }}" \
            --arg hash "$HASH" \
            --arg created_at "$CREATED_AT" \
            '{plan: $plan, commit: $commit, hash: $hash, created_at: $created_at}')

          curl -s --request PUT \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            --data "{\"data\": $JSON}" \
            "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/bootstrap-runner/plans/staging"

      - name: üßä Comment plan in PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = [
              '### üßä Terraform Plan for `bootstrap-runner`',
              '',
              'üì¶ Plan is stored in Vault at:',
              '`kv/home-ops/opentofu/homelab/bootstrap-runner/plans/staging`',
              '',
              'üßæ To inspect it locally:',
              '```bash',
              'vault kv get -field=plan kv/home-ops/opentofu/homelab/bootstrap-runner/plans/staging | base64 -d | less',
              '```',
              '',
              `‚úÖ Commit: \`${{ github.sha }}\``,
              `üïì Generated: \`${new Date().toISOString()}\``
            ].join('\n');

            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: prs.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              console.log('‚ö†Ô∏è No matching PR found on this branch.');
            }

      - name: üßπ Cleanup
        if: always()
        run: rm -f backend-consul.hcl vault.auto.tfvars tfplan || true
