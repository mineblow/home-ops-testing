name: 🚀 Terraform Plan (bootstrap-runner)

on:
  repository_dispatch:
    types: [terraform-bootstrap-runner]
  workflow_dispatch:

jobs:
  bootstrap-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner
      RUNNER_ENV: github-ci

    steps:
      - name: 🥦 Checkout repo
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: 🧠 Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: 🌐 Start Tailscale (GitHub-hosted)
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: 🌐 Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      - name: 🛠 Install OpenTofu & Vault CLI
        run: |
          set -euo pipefail
      
          echo "📦 Installing Vault CLI..."
          curl -fsSL https://releases.hashicorp.com/vault/1.15.5/vault_1.15.5_linux_amd64.zip -o vault.zip
          unzip -q vault.zip
          sudo install vault /usr/local/bin
          vault --version
      
          echo "📦 Installing OpenTofu..."
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version 1.6.2
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV
          tofu version
      
        shell: bash

      - name: 🔓 Authenticate to Vault
        env:
          VAULT_ROLE: bootstrap-runner-ci
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: 🔐 Fetch secrets & write tfvars files
        run: |
          set -euo pipefail
      
          mkdir -p "$ENV_PATH"
          : > "$ENV_PATH/vault.auto.tfvars"
          : > "$ENV_PATH/backend-consul.hcl"
          : > "$ENV_PATH/terraform.auto.tfvars"
      
          VAULT_PREFIX="kv/home-ops/environment/homelab/$ENV_NAME/secrets"
      
          echo "🔐 Fetching Vault secrets..."
      
          for SECRET in proxmox_api_url proxmox_api_token proxmox_user proxmox_ssh_key consul_state_locking_token consul_state_locking_path; do
            VAL=$(vault kv get -field=value "$VAULT_PREFIX/$SECRET" || true)
      
            if [[ -z "$VAL" ]]; then
              echo "::warning::Vault key $SECRET returned empty or not found"
              continue
            fi
      
            case $SECRET in
              proxmox_user)
                echo "::add-mask::$VAL"
                printf 'proxmox_ssh_user = "%s"\n' "$VAL" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
      
              proxmox_ssh_key)
                echo "$VAL" > "$ENV_PATH/proxmox.key"
                chmod 600 "$ENV_PATH/proxmox.key"
                echo "$VAL" | while IFS= read -r line; do
                  [[ -n "$line" ]] && echo "::add-mask::$line"
                done
                echo 'proxmox_ssh_private_key = "proxmox.key"' >> "$ENV_PATH/vault.auto.tfvars"
                ;;
      
              proxmox_api_url|proxmox_api_token)
                echo "::add-mask::$VAL"
                printf '%s = "%s"\n' "$SECRET" "$VAL" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
      
              consul_state_locking_token)
                echo "::add-mask::$VAL"
                echo "CONSUL_HTTP_TOKEN=$VAL" >> $GITHUB_ENV
                ;;
      
              consul_state_locking_path)
                echo "path = \"$VAL\"" >> "$ENV_PATH/backend-consul.hcl"
                ;;
            esac
          done
      
          CONSUL_DOMAIN=$(vault kv get -field=value kv/home-ops/consul/domain | sed 's:/*$::')
          echo "address = \"$CONSUL_DOMAIN\"" >> "$ENV_PATH/backend-consul.hcl"
          echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV
      
          VM_CONFIG=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/opentofu/terraform-auto-tfvars)
          echo "$VM_CONFIG" | while IFS= read -r line; do echo "::add-mask::$line"; done
          echo "$VM_CONFIG" >> "$ENV_PATH/terraform.auto.tfvars"      

      - name: 🧊 Run secure tofu plan and store in Vault
        run: bash ./.scripts/cicd/plan-to-vault.sh
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
          ENV_PATH: ${{ env.ENV_PATH }}
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          VAULT_PLAN_PATH: kv/home-ops/environment/homelab/${{ env.ENV_NAME }}/opentofu/plans/staging

      - name: 🚓 Create or update Terraform Plan PR
        run: |
          set -euo pipefail

          BRANCH="plan-$ENV_NAME"
          FILE=".plan-$ENV_NAME"
          COMMIT_MSG="🚓 Plan for $ENV_NAME"
          PLAN_PATH="kv/home-ops/environment/homelab/$ENV_NAME/opentofu/plans/staging"
          TIMESTAMP="$(TZ='America/Chicago' date +"%B %d, %Y @ %-I:%M %p CT")"

          git config --global user.email "opentofu-bot@mineblow.me"
          git config --global user.name "OpenTofu CI Bot"
          git fetch origin

          VERSION=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/metadata/home-ops/environment/homelab/$ENV_NAME/opentofu/plans/staging" | jq -r '.data.current_version // "unknown"')

          BODY=$(printf "%s\n" \
            "### 🚓 Terraform Plan for \`$ENV_NAME\`" \
            "" \
            "📆 **Stored securely in Vault:**" \
            "\`$PLAN_PATH\` (version: \`$VERSION\`)" \
            "" \
            "📌 To view:" \
            '```bash' \
            "vault kv get -field=plan -version=$VERSION $PLAN_PATH | base64 -d | less" \
            '```' \
            "" \
            "✅ Merge this PR to trigger apply." \
            "" \
            "🕓 Generated: \`$TIMESTAMP\`")

          if git ls-remote --exit-code --heads origin "$BRANCH" &>/dev/null; then
            echo "🔄 Branch exists, updating..."
            git checkout "$BRANCH"
            echo "$PLAN_PATH - Generated at $TIMESTAMP (version $VERSION)" > "$FILE"
            git add "$FILE"
            git commit -m "$COMMIT_MSG" || echo "ℹ️ Nothing to commit"
            git push origin "$BRANCH" || echo "ℹ️ Nothing to push"
            gh pr edit "$BRANCH" --body "$BODY"
          else
            echo "🚀 Creating new branch and PR..."
            git checkout -b "$BRANCH"
            echo "$PLAN_PATH - Generated at $TIMESTAMP (version $VERSION)" > "$FILE"
            git add "$FILE"
            git commit -m "$COMMIT_MSG"
            git push origin "$BRANCH"
            gh pr create --title "$COMMIT_MSG" --body "$BODY"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          VAULT_ADDR: ${{ env.VAULT_ADDR }}

      - name: 🩩 Cleanup
        if: always()
        run: |
          rm -f vault.json vault.auto.tfvars terraform.auto.tfvars backend-consul.hcl tfplan install-opentofu.sh ${{ env.ENV_PATH }}/proxmox.key || true
