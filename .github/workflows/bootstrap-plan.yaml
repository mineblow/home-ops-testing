name: 🚀 Terraform Plan (bootstrap-runner)

on:
  repository_dispatch:
    types: [terraform-bootstrap-runner]
  workflow_dispatch:

jobs:
  bootstrap-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      pull-requests: write
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner
      RUNNER_ENV: github-ci

    steps:
      - name: 🥦 Checkout repo
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: 🧠 Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: 🌐 Start Tailscale
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: 🌐 Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      - name: 🔓 Authenticate to Vault (home-ops)
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: 🔐 Fetch secrets & write tfvars files
        run: |
          set -euo pipefail
          mkdir -p "$ENV_PATH"
          > "$ENV_PATH/vault.auto.tfvars"
          > "$ENV_PATH/backend-consul.hcl"
          > "$ENV_PATH/terraform.auto.tfvars"

          VAULT_PREFIX="kv/data/home-ops/environment/homelab/$ENV_NAME/secrets"

          for SECRET in proxmox_api_url proxmox_api_token proxmox_user proxmox_ssh_key consul_state_locking_token consul_state_locking_path; do
            VAL=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/${VAULT_PREFIX}/$SECRET" | jq -r '.data.data.value // empty')

            if [ -z "$VAL" ]; then
              echo "::warning::Vault key $SECRET returned empty or not found"
            fi

            case $SECRET in
              proxmox_user)
                [ -n "$VAL" ] && echo "::add-mask::$VAL"
                printf "proxmox_ssh_user = \"%s\"\n" "$VAL" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
              proxmox_ssh_key)
                if [ -n "$VAL" ]; then
                  echo "$VAL" | while IFS= read -r line; do
                    [ -n "$line" ] && echo "::add-mask::$line"
                  done
                else
                  echo "::warning::$SECRET (SSH key) is empty, skipping mask"
                fi
                echo "$VAL" > "$ENV_PATH/proxmox.key" 2>/dev/null
                chmod 600 "$ENV_PATH/proxmox.key"
                printf "proxmox_ssh_private_key = \"proxmox.key\"\n" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
              proxmox_api_url|proxmox_api_token)
                [ -n "$VAL" ] && echo "::add-mask::$VAL"
                printf "%s = \"%s\"\n" "$SECRET" "$VAL" >> "$ENV_PATH/vault.auto.tfvars"
                ;;
              consul_state_locking_token)
                [ -n "$VAL" ] && echo "::add-mask::$VAL"
                echo "CONSUL_HTTP_TOKEN=$VAL" >> $GITHUB_ENV
                ;;
              consul_state_locking_path)
                printf "path = \"%s\"\n" "$VAL" >> "$ENV_PATH/backend-consul.hcl"
                ;;
            esac
          done

          CONSUL_DOMAIN=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/consul/domain" | jq -r '.data.data.value // empty' | sed 's:/*$::')
          printf "address = \"%s\"\n" "$CONSUL_DOMAIN" >> "$ENV_PATH/backend-consul.hcl"
          echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV

          VM_CONFIG=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/environment/homelab/$ENV_NAME/opentofu/terraform-auto-tfvars" | jq -r '.data.data.value // empty')
          echo "$VM_CONFIG" | while IFS= read -r line; do echo "::add-mask::$line"; done
          printf "%s\n" "$VM_CONFIG" >> "$ENV_PATH/terraform.auto.tfvars"

      - name: 📥 Install OpenTofu
        run: |
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version 1.6.2
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV

      - name: 🔓 Re-auth as bootstrap-runner-rw
        env:
          VAULT_ROLE: bootstrap-runner-rw
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: 📦 Tofu Init
        working-directory: ${{ env.ENV_PATH }}
        run: tofu init -backend-config=backend-consul.hcl -reconfigure

      - name: 🧊 Tofu Plan (silent)
        working-directory: ${{ env.ENV_PATH }}
        run: tofu plan -no-color -out=tfplan

      - name: 💾 Save tfplan to Vault
        run: |
          PLAN_PATH="${ENV_PATH}/tfplan"
      
          if [ ! -f "$PLAN_PATH" ]; then
            echo "❌ tfplan not found at $PLAN_PATH"
            exit 1
          fi
      
          PLAN_B64=$(base64 < "$PLAN_PATH" | tr -d '\n')
          echo "$PLAN_B64" | fold -w 64 | while read line; do echo "::add-mask::$line"; done
      
          curl -s --request POST "$VAULT_ADDR/v1/kv/data/home-ops/environment/homelab/${ENV_NAME}/opentofu/plans/staging" \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            --header "Content-Type: application/json" \
            --data "$(printf '{"data":{"plan":"%s"}}' "$PLAN_B64")"      

      - name: 🧊 Comment plan in PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = [
              '### 🧊 Terraform Plan for `bootstrap-runner`',
              '',
              '📦 Plan stored securely in Vault:',
              '`kv/home-ops/environment/homelab/bootstrap-runner/opentofu/plans/staging`',
              '',
              '🧾 To view it:',
              '```bash',
              'vault kv get -field=plan kv/home-ops/environment/homelab/bootstrap-runner/opentofu/plans/staging | base64 -d | less',
              '```',
              `✅ Commit: \`${{ github.sha }}\``,
              `🕓 Generated: \`${new Date().toISOString()}\``
            ].join('\n');

            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: prs.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f vault.json vault.auto.tfvars terraform.auto.tfvars backend-consul.hcl tfplan install-opentofu.sh ${{ env.ENV_PATH }}/proxmox.key || true
