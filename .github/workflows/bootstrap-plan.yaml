name: 🚀 Terraform Plan (bootstrap-runner)

on:
  repository_dispatch:
    types: [terraform-bootstrap-runner]
  workflow_dispatch:

jobs:
  bootstrap-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      pull-requests: write
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner

    steps:
      - name: 🥦 Checkout repo
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: 🧠 Extract Vault bootstrap from GCP
        run: |
          set -euo pipefail

          RAW=$(gcloud secrets versions access latest --secret=vault_bootstrap)
          echo "$RAW" > vault.json

          REQUIRED_KEYS=(vault_addr vault_role oauth_client_id oauth_client_secret)
          for key in "${REQUIRED_KEYS[@]}"; do
            VALUE=$(jq -r ."$key" vault.json)
            if [[ "$VALUE" == "null" || -z "$VALUE" ]]; then
              echo "❌ Missing $key in vault.json"
              exit 1
            fi
          done

          export VAULT_ADDR=$(jq -r .vault_addr vault.json)
          export VAULT_ROLE=$(jq -r .vault_role vault.json)
          export CLIENT_ID=$(jq -r .oauth_client_id vault.json)
          export CLIENT_SECRET=$(jq -r .oauth_client_secret vault.json)

          echo "::add-mask::$VAULT_ADDR"
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"

          echo "VAULT_ADDR=$VAULT_ADDR" >> "$GITHUB_ENV"
          echo "VAULT_ROLE=$VAULT_ROLE" >> "$GITHUB_ENV"
          echo "TAILSCALE_CLIENT_ID=$CLIENT_ID" >> "$GITHUB_ENV"
          echo "TAILSCALE_CLIENT_SECRET=$CLIENT_SECRET" >> "$GITHUB_ENV"

      - name: 🌐 Start Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: 🔓 Authenticate to Vault (OIDC)
        run: |
          set -euo pipefail

          JWT=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                      "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r .value)

          RESPONSE=$(curl -s --request POST \
            --data "{\"jwt\":\"$JWT\",\"role\":\"${VAULT_ROLE}\"}" \
            "$VAULT_ADDR/v1/auth/jwt/login")

          VAULT_TOKEN=$(echo "$RESPONSE" | jq -r .auth.client_token)

          if [[ "$VAULT_TOKEN" == "null" || -z "$VAULT_TOKEN" ]]; then
            echo "❌ Vault login failed"
            echo "$RESPONSE"
            exit 1
          fi

          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> "$GITHUB_ENV"

      - name: 🔐 Fetch secrets & write config
        run: |
          set -euo pipefail
          mkdir -p "$ENV_PATH"
          > "$ENV_PATH/vault.auto.tfvars"
          > "$ENV_PATH/backend-consul.hcl"
      
          # 🔐 Inject Proxmox API values
          declare -A PROXMOX=(
            ["proxmox_api_url"]="api_url"
            ["proxmox_api_token"]="automation_full_token"
          )
      
          for VAR in "${!PROXMOX[@]}"; do
            VAL=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/proxmox/${PROXMOX[$VAR]}" | jq -r '.data.data.value // empty')
            echo "::add-mask::$VAL"
            echo "$VAR = \"$VAL\"" >> "$ENV_PATH/vault.auto.tfvars"
          done
        
            # 🔐 Inject Proxmox SSH config
            echo 'proxmox_ssh_user = "auto"' >> "$ENV_PATH/vault.auto.tfvars"
        
            SSH_KEY=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/proxmox/automation_ssh_key" | jq -r '.data.data.value')
            echo "::add-mask::$SSH_KEY"
            echo "$SSH_KEY" > "$ENV_PATH/proxmox.key"
            chmod 600 "$ENV_PATH/proxmox.key"
        
            echo "proxmox_ssh_private_key = \"${ENV_PATH}/proxmox.key\"" >> "$ENV_PATH/vault.auto.tfvars"
        
            # 🔐 Inject Consul backend config
            LOCK_PATH=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/$ENV_NAME/consul/state_locking_path" | jq -r '.data.data.value')
            LOCK_TOKEN=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/$ENV_NAME/consul/state_locking_token" | jq -r '.data.data.value')
            CONSUL_DOMAIN=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/kv/data/home-ops/consul/domain" | jq -r '.data.data.value' | sed 's:/*$::')
        
            echo "::add-mask::$LOCK_TOKEN"
            echo "address = \"$CONSUL_DOMAIN\"" >> "$ENV_PATH/backend-consul.hcl"
            echo "path    = \"$LOCK_PATH\"" >> "$ENV_PATH/backend-consul.hcl"
            echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV
            echo "CONSUL_HTTP_TOKEN=$LOCK_TOKEN" >> $GITHUB_ENV
        
            # 🔐 Inject vm_config
            VM_CONFIG=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
              "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/$ENV_NAME/vm_config" \
              | jq -c '.data.data.value')

            echo "::add-mask::$VM_CONFIG"
            echo "vm_config = $VM_CONFIG" >> "$ENV_PATH/vault.auto.tfvars"

      - name: 📥 Install OpenTofu
        run: |
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version 1.6.2
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV

      - name: 📦 Tofu Init
        working-directory: ${{ env.ENV_PATH }}
        run: tofu init -backend-config=backend-consul.hcl -reconfigure

      - name: 🧊 Tofu Plan
        working-directory: ${{ env.ENV_PATH }}
        run: tofu plan -no-color -var-file="vault.auto.tfvars" -out=tfplan

      - name: 💾 Save tfplan to Vault
        run: |
          B64=$(base64 -w 0 "${{ env.ENV_PATH }}/tfplan")
          HASH=$(sha256sum "${{ env.ENV_PATH }}/tfplan" | awk '{print $1}')
          CREATED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          JSON=$(jq -n \
            --arg plan "$B64" \
            --arg commit "${{ github.sha }}" \
            --arg hash "$HASH" \
            --arg created_at "$CREATED_AT" \
            '{plan: $plan, commit: $commit, hash: $hash, created_at: $created_at}')

          curl -s --request PUT \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            --data "{\"data\": $JSON}" \
            "$VAULT_ADDR/v1/kv/data/home-ops/opentofu/homelab/$ENV_NAME/plans/staging"

      - name: 🧊 Comment plan in PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = [
              '### 🧊 Terraform Plan for `bootstrap-runner`',
              '',
              '📦 Plan stored in Vault:',
              '`kv/home-ops/opentofu/homelab/bootstrap-runner/plans/staging`',
              '',
              '🧾 To view it:',
              '```bash',
              'vault kv get -field=plan kv/home-ops/opentofu/homelab/bootstrap-runner/plans/staging | base64 -d | less',
              '```',
              `✅ Commit: \`${{ github.sha }}\``,
              `🕓 Generated: \`${new Date().toISOString()}\``
            ].join('\n');

            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: prs.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f vault.auto.tfvars backend-consul.hcl tfplan vault.json install-opentofu.sh "${ENV_PATH}/proxmox.key" || true
