---
  name: 🏗️ Monthly Proxmox Template Builder
  
  on:
    schedule:
      - cron: '0 5 1 * *'
    workflow_dispatch:
  
  jobs:
    detect-templates:
      runs-on: ubuntu-latest
      timeout-minutes: 30
      
      outputs:
        templates: ${{ steps.set.outputs.templates }}
      steps:
        - name: 📎 Checkout repo
          uses: actions/checkout@v4
  
        - id: set
          run: |
            files=$(find .proxmox/iso-builder -type f -name '*-template.sh' -exec basename {} \;)
            echo "Found templates: $files"
            json=$(jq -nc --argjson arr "$(printf '%s\n' $files | jq -R . | jq -s .)" '$arr')
            echo "templates=$json" >> "$GITHUB_OUTPUT"
  
    build-template:
      needs: detect-templates
      runs-on: ubuntu-latest
      timeout-minutes: 30
  
      permissions:
        contents: write
        pull-requests: write
        id-token: write

      strategy:
        matrix:
          template: ${{ fromJson(needs.detect-templates.outputs.templates) }}
  
      steps:
        - name: 📎 Checkout repo
          uses: actions/checkout@v4
  
        - name: 🔐 Authenticate to Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
  
        - name: 🧠 Extract Vault bootstrap from GCP
          run: bash ./.scripts/cicd/bootstrap/auth-google.sh
  
        - name: 🌐 Start Tailscale (GitHub-hosted)
          uses: tailscale/github-action@v2
          with:
            oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
            oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
            hostname: template-builder-ci
            tags: tag:github-ci
  
        - name: 💠 Install Vault CLI
          run: bash .scripts/cicd/bootstrap/install-vault.sh
  
        - name: 🔓 Authenticate to Vault
          env:
            VAULT_ROLE: template-builder-ci
          run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

        - name: 🔐 Fetch Proxmox secrets from Vault
          run: |
            set -euo pipefail
  
            SECRET_PATH="kv/home-ops/environment/homelab/template-builder/secrets/proxmox_ssh_key_private"
            echo "🔑 Fetching SSH key from Vault: $SECRET_PATH"
            
            vault kv get -field=value "$SECRET_PATH" | cat > proxmox.key
        
            # echo ""
            # echo "🔐 Masking key contents line by line..."
            # while IFS= read -r line; do
            #   echo "::add-mask::$line"
            # done < proxmox.key
        
            echo ""
            echo "🔧 Setting permissions on key file"
            chmod 600 proxmox.key

            echo "🔑 Fetching SSH user + domain"
            PROXMOX_SSH_USER=$(vault kv get -field=value kv/home-ops/global/proxmox/proxmox_ssh_user)
            PROXMOX_DOMAIN=$(vault kv get -field=value kv/home-ops/global/proxmox/domain)
            echo "::add-mask::$PROXMOX_SSH_USER"
            echo "::add-mask::$PROXMOX_DOMAIN"
            echo "PROXMOX_SSH_USER=$PROXMOX_SSH_USER" >> "$GITHUB_ENV"
            echo "PROXMOX_DOMAIN=$PROXMOX_DOMAIN" >> "$GITHUB_ENV"
          env:
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
  
        - name: 📤 Copy script to Proxmox host
          run: |
            ssh -o StrictHostKeyChecking=no -i proxmox.key \
              "$PROXMOX_SSH_USER@$PROXMOX_DOMAIN" \
              "mkdir -p /home/$PROXMOX_SSH_USER/scripts"
          
            scp -i proxmox.key -o StrictHostKeyChecking=no \
              ".proxmox/iso-builder/${{ matrix.template }}" \
              $PROXMOX_SSH_USER@$PROXMOX_DOMAIN:/home/$PROXMOX_SSH_USER/scripts/
  
            ssh -i proxmox.key -o StrictHostKeyChecking=no \
              $PROXMOX_SSH_USER@$PROXMOX_DOMAIN \
              "sudo -n chmod +x /home/$PROXMOX_SSH_USER/scripts/${{ matrix.template }}"
  
        - name: 🚀 Execute and delete script on Proxmox host
          run: |
            set -euo pipefail
            SCRIPT_NAME=${{ matrix.template }}
  
            echo "🚀 Running $SCRIPT_NAME remotely on $PROXMOX_DOMAIN"
            ssh -i proxmox.key -o StrictHostKeyChecking=no "$PROXMOX_SSH_USER@$PROXMOX_DOMAIN" \
              "bash -c 'set -euo pipefail && sudo -n /home/$PROXMOX_SSH_USER/scripts/$SCRIPT_NAME && rm -f /home/$PROXMOX_SSH_USER/scripts/$SCRIPT_NAME'"

        - name: 📥 Pull metadata from Proxmox
          id: fetch_meta
          run: |
            set -euo pipefail
        
            SCRIPT_NAME="${{ matrix.template }}"
            VERSION=$(echo "$SCRIPT_NAME" | sed -E 's/^build-ubuntu-([0-9]{4})-template.sh$/\1/')
            META_NAME="ubuntu-${VERSION}.meta.json"
        
            echo "📥 Downloading $META_NAME from Proxmox..."
            scp -i proxmox.key -o StrictHostKeyChecking=no \
              "$PROXMOX_SSH_USER@$PROXMOX_DOMAIN:/var/lib/vz/template/$META_NAME" \
              "./$META_NAME"
        
            if [[ ! -s "$META_NAME" ]]; then
              echo "❌ Failed to fetch metadata file or file is empty"
              exit 1
            fi
        
            echo "✅ Pulled and verified: $META_NAME"
            echo "meta_file=$META_NAME" >> "$GITHUB_OUTPUT"
        
            echo "🧹 Cleaning up metadata from remote"
            ssh -i proxmox.key -o StrictHostKeyChecking=no \
              "$PROXMOX_SSH_USER@$PROXMOX_DOMAIN" \
              "rm -f /var/lib/vz/template/$META_NAME"
    
        - name: 🔐 Push metadata to Vault
          run: |
            META_FILE="${{ steps.fetch_meta.outputs.meta_file }}"
        
            DISTRO=$(jq -r '.os_version' "$META_FILE" | cut -d'-' -f1)
            VERSION=$(jq -r '.os_version' "$META_FILE" | cut -d'-' -f2 | tr -d '.')
            VAULT_PATH="kv/home-ops/environment/homelab/template-builder/build-state/${DISTRO}-${VERSION}"
        
            echo "📦 Pushing parsed metadata to Vault at $VAULT_PATH"
            jq -r 'to_entries[] | "\(.key)=\(.value)"' "$META_FILE" | xargs vault kv put "$VAULT_PATH"
          env:
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}        

        - name: 🧹 Cleanup
          if: always()
          run: rm -f proxmox.key vault.json *.meta.json
        
    vm_config_bumper:
      needs: build-template
      runs-on: ubuntu-latest
      timeout-minutes: 30
  
      permissions:
        contents: write
        pull-requests: write
        id-token: write
  
      strategy:
        matrix:
          vm: [ "bootstrap-runner", "k3s-master" ]
      steps:
        - name: 📎 Checkout repo
          uses: actions/checkout@v4
  
        - name: 🔐 Authenticate to Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
  
        - name: 🧠 Extract Vault bootstrap from GCP
          run: bash ./.scripts/cicd/bootstrap/auth-google.sh
  
        - name: 🌐 Start Tailscale (GitHub-hosted)
          uses: tailscale/github-action@v2
          with:
            oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
            oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
            hostname: template-builder-ci
            tags: tag:github-ci
  
        - name: 💠 Install Vault CLI
          run: bash .scripts/cicd/bootstrap/install-vault.sh
  
        - name: 🔐 Authenticate to Vault
          run: bash .scripts/cicd/bootstrap/vault-auth.sh
          env:
            VAULT_ROLE: template-builder-ci
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
  
        - name: 🧠 Fetch VM metadata (gracefully skip if missing)
          id: fetch_meta
          continue-on-error: true
          run: |
            set -euo pipefail
            VM="${{ matrix.vm }}"
            VAULT_VM_PATH="kv/home-ops/environment/homelab/${VM}/opentofu/metadata"
  
            echo "🔍 Attempting to fetch metadata for $VM..."
            if ! vault kv get -format=json "$VAULT_VM_PATH" > vm_meta.json 2>/dev/null; then
              echo "❌ Metadata not found or access denied for $VM. Skipping job."
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
  
            OS_VERSION=$(jq -r '.data.data.os_version' vm_meta.json)
            echo "os_version=$OS_VERSION" >> "$GITHUB_OUTPUT"
            echo "skip=false" >> "$GITHUB_OUTPUT"
          env:
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
  
        - name: 📥 Fetch latest template ID from Vault
          id: fetch_template
          if: steps.fetch_meta.outputs.skip != 'true'
          run: |
            OS_VERSION="${{ steps.fetch_meta.outputs.os_version }}"
            vault kv get -format=json kv/home-ops/environment/homelab/template-builder/build-state/${OS_VERSION} > template_meta.json
            TEMPLATE_ID=$(jq -r '.data.data.template_id' template_meta.json)
            echo "template_id=$TEMPLATE_ID" >> "$GITHUB_OUTPUT"
          env:
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
  
        - name: 📥 Fetch current terraform.auto.tfvars from Vault
          if: steps.fetch_meta.outputs.skip != 'true'
          run: |
            VM="${{ matrix.vm }}"
            vault kv get -field=value kv/home-ops/environment/homelab/${VM}/opentofu/terraform.auto.tfvars > terraform.auto.tfvars
  
        - name: 🔎 Check if template_vmid is stale
          id: check
          if: steps.fetch_meta.outputs.skip != 'true'
          run: |
            VM="${{ matrix.vm }}"
            TEMPLATE_ID="${{ steps.fetch_template.outputs.template_id }}"
            CURRENT_ID=$(awk "/\"${VM}\".*{/,/}/ {if (\$1 == \"template_vmid\") print \$3}" terraform.auto.tfvars)
  
            echo "Current VMID: $CURRENT_ID, Latest: $TEMPLATE_ID"
  
            if [[ "$CURRENT_ID" != "$TEMPLATE_ID" ]]; then
              echo "stale=true" >> "$GITHUB_OUTPUT"
            else
              echo "stale=false" >> "$GITHUB_OUTPUT"
            fi
  
        - name: 📤 Create stale signal file and PR
          if: steps.check.outputs.stale == 'true'
          run: |
            VM="${{ matrix.vm }}"
            BRANCH="signal-template-bump-${VM}"
            TEMPLATE_ID="${{ steps.fetch_template.outputs.template_id }}"
  
            mkdir -p .ci-signals
            echo "template_vmid for $VM is stale. Needs update to ${TEMPLATE_ID}" > .ci-signals/${VM}
  
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
  
            git checkout -b "$BRANCH"
            git add .ci-signals/${VM}
            git commit -m "⬆️ Signal: template_vmid bump required for ${VM}"
            git push origin "$BRANCH"
  
            gh pr create \
              --title "⬆️ Signal: Bump template_vmid for ${VM}" \
              --body "A new template is available. Update \`template_vmid\` for \`${VM}\` to \`${TEMPLATE_ID}\`. Merge this PR to trigger Vault sync." \
              --head "$BRANCH" \
              --base main
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
        - name: 💤 VM skipped (no metadata in Vault)
          if: steps.fetch_meta.outputs.skip == 'true'
          run: echo "⚠️  Skipping ${{ matrix.vm }} — metadata secret not found in Vault."
