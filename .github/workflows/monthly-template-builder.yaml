---
name: üèóÔ∏è Monthly Proxmox Template Builder

on:
  schedule:
    - cron: '0 5 1 * *'  # 1st of every month @ 5AM UTC
  workflow_dispatch:
    inputs: {}

jobs:
  build-templates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for OIDC ‚Üí Vault login

    env:
      PROXMOX_HOST: proxmox.mineblow.me

    steps:
      - name: üìé Checkout repo
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: üß† Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: üåê Start Tailscale (GitHub-hosted)
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: üåê Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      - name: üîì Authenticate to Vault
        env:
          VAULT_ROLE: bootstrap-runner-ci
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: üîë Fetch and validate SSH key from Vault
        run: |
          set -euo pipefail

          SECRET_PATH="kv/data/home-ops/proxmox/automation_ssh_key"
          curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/$SECRET_PATH" \
            | jq -r '.data.data.value' > proxmox.key

          chmod 600 proxmox.key
          ssh-keygen -y -f proxmox.key >/dev/null

      - name: üì§ Copy all builder scripts to Proxmox host
        run: |
          set -euo pipefail
          shopt -s nullglob

          scripts=(.scripts/*template.sh)

          if [[ ${#scripts[@]} -eq 0 ]]; then
            echo "‚ùå No matching template scripts found in .scripts/"
            exit 1
          fi

          for script in "${scripts[@]}"; do
            echo "üì§ Copying $script"
            scp -i proxmox.key -o StrictHostKeyChecking=no "$script" auto@$PROXMOX_HOST:/home/auto/scripts/ || {
              echo "‚ùå SCP failed for $script"
              exit 1
            }

            ssh -o BatchMode=yes -i proxmox.key -o StrictHostKeyChecking=no auto@$PROXMOX_HOST \
              "sudo -n chmod +x /home/auto/scripts/$(basename "$script")" || {
                echo "‚ùå chmod failed for $script"
                exit 1
              }
          done

      - name: üöÄ Execute all builder scripts
        run: |
          set -euo pipefail
          shopt -s nullglob

          scripts=(.scripts/*template.sh)

          if [[ ${#scripts[@]} -eq 0 ]]; then
            echo "‚ùå No matching template scripts found in .scripts/"
            exit 1
          fi

          for script in "${scripts[@]}"; do
            name=$(basename "$script")
            echo "üöÄ Running $name"
            ssh -o BatchMode=yes -i proxmox.key -o StrictHostKeyChecking=no auto@$PROXMOX_HOST \
              "set -euo pipefail; sudo -n /home/auto/scripts/$name" || {
                echo "‚ùå $name failed"
                exit 1
              }
          done

      # - name: üìú Save logs or metadata (optional)
      #   if: always()
      #   run: |
      #     echo "üìù TODO: Save build logs or output JSON to Vault/GCS"

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -f proxmox.key vault.json
