---
  name: üèóÔ∏è Monthly Proxmox Template Builder
  
  on:
    schedule:
      - cron: '0 5 1 * *'
    workflow_dispatch:
  
  jobs:
    detect-templates:
      runs-on: ubuntu-latest
      timeout-minutes: 30
      
      outputs:
        templates: ${{ steps.set.outputs.templates }}
      steps:
        - name: üìé Checkout repo
          uses: actions/checkout@v4
  
        - id: set
          run: |
            files=$(find .scripts/cicd/templates -type f -name '*-template.sh' -exec basename {} \;)
            echo "Found templates: $files"
            json=$(jq -nc --argjson arr "$(printf '%s\n' $files | jq -R . | jq -s .)" '$arr')
            echo "templates=$json" >> "$GITHUB_OUTPUT"
  
    build-template:
      needs: detect-templates
      runs-on: ubuntu-latest
      timeout-minutes: 30
  
      permissions:
        contents: write
        pull-requests: write
        id-token: write

      strategy:
        matrix:
          template: ${{ fromJson(needs.detect-templates.outputs.templates) }}
  
      steps:
        - name: üìé Checkout repo
          uses: actions/checkout@v4
  
        - name: üîê Authenticate to Google Cloud
          uses: google-github-actions/auth@v1
          with:
            credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
  
        - name: üß† Extract Vault bootstrap from GCP
          run: bash ./.scripts/cicd/bootstrap/auth-google.sh
  
        - name: üåê Start Tailscale (GitHub-hosted)
          uses: tailscale/github-action@v2
          with:
            oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
            oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
            hostname: template-builder-ci
            tags: tag:github-ci
  
        - name: üí† Install Vault CLI
          run: bash .scripts/cicd/bootstrap/install-vault.sh
  
        - name: üîì Authenticate to Vault
          env:
            VAULT_ROLE: template-builder-ci
          run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

        - name: üîê Fetch Proxmox secrets from Vault
          run: |
            set -euo pipefail
  
            SECRET_PATH="kv/home-ops/environment/homelab/template-builder/secrets/proxmox_ssh_key_private"
            echo "üîë Fetching SSH key from Vault: $SECRET_PATH"
            
            vault kv get -field=value "$SECRET_PATH" > proxmox.key
        
            # echo ""
            # echo "üîê Masking key contents line by line..."
            # while IFS= read -r line; do
            #   echo "::add-mask::$line"
            # done < proxmox.key
        
            echo ""
            echo "üîß Setting permissions on key file"
            chmod 600 proxmox.key
        
            echo ""
            echo "üïµÔ∏è File type of key:"
            file proxmox.key
        
            echo ""
            echo "üìè Line count of key:"
            wc -l proxmox.key
        
            echo ""
            echo "üì¶ Preview of key content:"
            head -n 5 proxmox.key
        
            echo ""
            echo "üî¨ Hexdump preview:"
            hexdump -C proxmox.key | head -n 20
            
            echo "üîë Fetching SSH user + domain"
            PROXMOX_SSH_USER=$(vault kv get -field=value kv/home-ops/global/proxmox/proxmox_ssh_user)
            PROXMOX_DOMAIN=$(vault kv get -field=value kv/home-ops/global/proxmox/domain)
            echo "::add-mask::$PROXMOX_SSH_USER"
            echo "::add-mask::$PROXMOX_DOMAIN"
            echo "PROXMOX_SSH_USER=$PROXMOX_SSH_USER" >> "$GITHUB_ENV"
            echo "PROXMOX_DOMAIN=$PROXMOX_DOMAIN" >> "$GITHUB_ENV"
          env:
            VAULT_ADDR: ${{ env.VAULT_ADDR }}
            VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
  
        - name: üì§ Copy script to Proxmox host
          run: |
            scp -i proxmox.key -o StrictHostKeyChecking=no \
              ".scripts/cicd/templates/${{ matrix.template }}" \
              $PROXMOX_SSH_USER@$PROXMOX_DOMAIN:/home/$PROXMOX_SSH_USER/scripts/
  
            ssh -i proxmox.key -o StrictHostKeyChecking=no \
              $PROXMOX_SSH_USER@$PROXMOX_DOMAIN \
              "sudo -n chmod +x /home/$PROXMOX_SSH_USER/scripts/${{ matrix.template }}"
  
        - name: üöÄ Execute and delete script on Proxmox host
          run: |
            set -euo pipefail
            SCRIPT_NAME=${{ matrix.template }}
  
            echo "üöÄ Running $SCRIPT_NAME remotely on $PROXMOX_DOMAIN"
            ssh -i proxmox.key -o StrictHostKeyChecking=no "$PROXMOX_SSH_USER@$PROXMOX_DOMAIN" \
              "bash -c 'set -euo pipefail && sudo -n /home/$PROXMOX_SSH_USER/scripts/$SCRIPT_NAME && rm -f /home/$PROXMOX_SSH_USER/scripts/$SCRIPT_NAME'"

        - name: üßπ Cleanup
          if: always()
          run: rm -f proxmox.key vault.json
  