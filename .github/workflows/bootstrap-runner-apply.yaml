---
name: ✅ Terraform Apply (bootstrap-runner)

# This workflow is triggered by the bootstrap-runner-plan workflow
# when a plan is created. It applies the plan to the environment 
on:
  push:
    branches:
      - main
    paths:
      - '.ci-signals/.plan-bootstrap-runner'
  workflow_dispatch:    

jobs:
  bootstrap-apply:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner
      RUNNER_ENV: github-ci
      PLAN_PATH: kv/home-ops/environment/homelab/bootstrap-runner/opentofu/plans/staging
      VAULT_VERSION: 1.15.5
      TOFU_VERSION: 1.6.2

    steps:
      - name: 🥦 Checkout repo
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: 🧠 Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: 🌐 Start Tailscale (GitHub-hosted)
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: 🌐 Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      # - name: 💾 Restore CLI cache
      #   uses: actions/cache@v3
      #   id: cli-cache
      #   with:
      #     path: |
      #       ~/.opentofu
      #       /usr/local/bin/vault
      #     key: ${{ runner.os }}-cli-cache-vault-${{ env.VAULT_VERSION }}-tofu-${{ env.TOFU_VERSION }}      

      - name: 💠 Install OpenTofu & Vault CLI
#       if: steps.cli-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
      
          echo "📦 Installing Vault CLI v${VAULT_VERSION}..."
          curl -fsSL https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip -o vault.zip
          unzip -q vault.zip
          sudo install vault /usr/local/bin
          vault --version
      
          echo "📦 Installing OpenTofu v${TOFU_VERSION}..."
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version $TOFU_VERSION
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV
          tofu version        

      - name: 🔓 Authenticate to Vault
        env:
          VAULT_ROLE: bootstrap-runner-ci
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: 🔐 Rebuild backend config from Vault
        run: |
          set -euo pipefail
          mkdir -p "$ENV_PATH"
      
          LOCK_PATH=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/consul_state_locking_path)
          LOCK_TOKEN=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/consul_state_locking_token)
          CONSUL_DOMAIN=$(vault kv get -field=value kv/home-ops/global/consul/domain | sed 's:/*$::')
      
          # Mask secrets
          echo "::add-mask::$LOCK_PATH"
          echo "::add-mask::$LOCK_TOKEN"
          echo "::add-mask::$CONSUL_DOMAIN"
      
          # Write backend config
          echo "path = \"$LOCK_PATH\"" > "$ENV_PATH/backend-consul.hcl"
          echo "address = \"$CONSUL_DOMAIN\"" >> "$ENV_PATH/backend-consul.hcl"
      
          # Export for tofu init
          echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV
          echo "CONSUL_HTTP_TOKEN=$LOCK_TOKEN" >> $GITHUB_ENV
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

      - name: 📅 Fetch and decode tfplan from Vault
        run: |
          set -euo pipefail
          echo "➡️ Writing plan to $ENV_PATH/tfplan"
          mkdir -p "$ENV_PATH"

          echo "🔑 Fetching plan from: $PLAN_PATH"
          vault kv get -field=plan "$PLAN_PATH" | base64 -d > "$ENV_PATH/tfplan"

          echo "✅ Plan saved:"
          ls -lh "$ENV_PATH/tfplan"
          file "$ENV_PATH/tfplan"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          ENV_PATH: ${{ env.ENV_PATH }}
          PLAN_PATH: ${{ env.PLAN_PATH }}

      - name: 🔐 Pull Proxmox SSH creds from Vault
        run: |
          set -euo pipefail

          echo "🔑 Fetching Proxmox SSH user"
          PROXMOX_USER=$(vault kv get -field=value kv/home-ops/global/proxmox/proxmox_ssh_user)
          echo "::add-mask::$PROXMOX_USER"
          echo "proxmox_ssh_user = \"$PROXMOX_USER\"" >> "$ENV_PATH/vault.auto.tfvars"

          echo "🔑 Fetching Proxmox SSH private key"
          PROXMOX_SSH_KEY=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/proxmox_ssh_key_private)
          echo "$PROXMOX_SSH_KEY" | while read -r line; do echo "::add-mask::$line"; done
          echo "$PROXMOX_SSH_KEY" > "$ENV_PATH/proxmox.key"
          chmod 600 "$ENV_PATH/proxmox.key"

          echo "proxmox_ssh_private_key = \"proxmox.key\"" >> "$ENV_PATH/vault.auto.tfvars"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          
      - name: ✅ Apply tfplan
        run: |
          set -euo pipefail
          tofu -chdir="$ENV_PATH" init -backend-config=backend-consul.hcl -reconfigure
          tofu -chdir="$ENV_PATH" apply -auto-approve tfplan 2>&1 | tee apply.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "❌ Terraform Apply failed!"
            cat apply.log
            exit $EXIT_CODE
          fi
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

      - name: 📤 Push VM metadata to Vault
        run: |
          set -euo pipefail
      
          METADATA_FILE="$ENV_PATH/metadata/$ENV_NAME.json"
          VAULT_PATH="kv/home-ops/environment/homelab/$ENV_NAME/opentofu/metadata"
      
          if [ ! -f "$METADATA_FILE" ]; then
            echo "❌ Metadata file not found at $METADATA_FILE"
            exit 1
          fi
      
          NAME=$(jq -r .name "$METADATA_FILE")
          ROLE=$(jq -r .role "$METADATA_FILE")
          VMID=$(jq -r .vmid "$METADATA_FILE")
          OS_VERSION=$(jq -r .os_version "$METADATA_FILE")
          NOTES=$(jq -r .notes "$METADATA_FILE")
          IP=$(jq -r .ip "$METADATA_FILE")
      
          echo "::add-mask::$NAME"
          echo "::add-mask::$ROLE"
          echo "::add-mask::$VMID"
          echo "::add-mask::$OS_VERSION"
          echo "::add-mask::$NOTES"
          echo "::add-mask::$IP"
      
          vault kv put "$VAULT_PATH" \
            name="$NAME" \
            role="$ROLE" \
            vmid="$VMID" \
            os_version="$OS_VERSION" \
            notes="$NOTES" \
            ip="$IP"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          ENV_PATH: ${{ env.ENV_PATH }}
          ENV_NAME: ${{ env.ENV_NAME }}        

      - name: 🕵️ Fetch GitHub PAT, VM SSH key, and VM metadata for Ansible
        run: |
          set -euo pipefail
      
          echo "🔑 Fetching GitHub PAT"
          GITHUB_PAT=$(vault kv get -field=value kv/home-ops/global/github/pat_runner_manage)
          echo "$GITHUB_PAT" | while read -r line; do echo "::add-mask::$line"; done
          echo "GITHUB_PAT=$GITHUB_PAT" >> "$GITHUB_ENV"
      
          echo "🔑 Fetching VM SSH private key"
          VM_SSH_KEY=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/vm_ssh_key_private)
          echo "$VM_SSH_KEY" | while read -r line; do echo "::add-mask::$line"; done
          echo "$VM_SSH_KEY" > "$ENV_PATH/proxmox_vm.key"
          chmod 600 "$ENV_PATH/proxmox_vm.key"
      
          echo "📦 Fetching VM metadata (role + ip)"
          VM_ROLE=$(vault kv get -field=role kv/home-ops/environment/homelab/$ENV_NAME/opentofu/metadata)
          VM_IP=$(vault kv get -field=ip kv/home-ops/environment/homelab/$ENV_NAME/opentofu/metadata)
          echo "::add-mask::$VM_ROLE"
          echo "::add-mask::$VM_IP"
          echo "VM_ROLE=$VM_ROLE" >> "$GITHUB_ENV"
          echo "VM_IP=$VM_IP" >> "$GITHUB_ENV"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}                     

      - name: 🧬 Request GitHub Actions registration token
        id: runner_token
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_PAT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/mineblow/home-ops-testing/actions/runners/registration-token)
      
          TOKEN=$(echo "$RESPONSE" | jq -r .token)
          echo "::add-mask::$TOKEN"
          echo "RUNNER_TOKEN=$TOKEN" >> "$GITHUB_ENV"
        
      - name: 🔧 Force jmespath install into Ansible’s Python env
        run: |
          PY=$(ansible -m setup localhost --connection=local -i localhost, | grep 'ansible_python_interpreter' | cut -d'"' -f4)
          echo "Using Python: $PY"
          "$PY" -m pip install --upgrade --user jmespath
      
      - name: 🔧 Export Python user site path
        run: |
          echo "PYTHONPATH=$(python3 -m site --user-site)" >> "$GITHUB_ENV"
            
      - name: 🚀 Run Ansible to configure the VM
        env:
          ANSIBLE_CONFIG: ansible/ansible.cfg
          GITHUB_PAT: ${{ env.GITHUB_PAT }}
          RUNNER_TOKEN: ${{ env.RUNNER_TOKEN }} 
        run: |
          ansible-playbook -i "${VM_IP}," \
            -u ubuntu \
            --private-key $ENV_PATH/proxmox_vm.key \
            --ssh-common-args "-o StrictHostKeyChecking=no" \
            -e env_name=bootstrap-runner \
            -e vault_addr=$VAULT_ADDR \
            -e vault_token=$VAULT_TOKEN \
            -e bootstrap_user=ubuntu \
            -e github_runner_token=$RUNNER_TOKEN \
            -e github_owner=mineblow \
            -e github_repo=home-ops-testing \
            -e github_pat=$GITHUB_PAT \
            ansible/playbooks/provision-vm.yaml      

      - name: 🧼 Cleanup
        if: always()
        run: |
          rm -f install-opentofu.sh vault.zip "$ENV_PATH/tfplan" "$ENV_PATH/proxmox.key" "$ENV_PATH/vault.auto.tfvars"
