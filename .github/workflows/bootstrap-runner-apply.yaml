---
name: ‚úÖ Terraform Apply (bootstrap-runner)

# This workflow is triggered by the bootstrap-runner-plan workflow
# when a plan is created. It applies the plan to the environment 
on:
  workflow_dispatch:
  push:
    branches:
      - main
    
jobs:
  bootstrap-apply:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.actor == 'github-actions[bot]' &&
        contains(github.event.head_commit.message, 'üöì Plan for bootstrap-runner')

    permissions:
      contents: read
      id-token: write

    env:
      ENV_NAME: bootstrap-runner
      ENV_PATH: terraform/environments/homelab/bootstrap-runner
      RUNNER_ENV: github-ci
      PLAN_PATH: kv/home-ops/environment/homelab/bootstrap-runner/opentofu/plans/staging
      VAULT_VERSION: 1.15.5
      TOFU_VERSION: 1.6.2

    steps:
      - name: ü•¶ Checkout repo
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: üß† Extract Vault bootstrap from GCP
        run: bash ./.scripts/cicd/bootstrap/auth-google.sh

      - name: üåê Start Tailscale (GitHub-hosted)
        if: ${{ env.RUNNER_ENV != 'self-hosted' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ env.TAILSCALE_CLIENT_SECRET }}
          hostname: github-bootstrap-plan
          tags: tag:github-ci

      - name: üåê Start Tailscale (self-hosted)
        if: ${{ env.RUNNER_ENV == 'self-hosted' }}
        run: bash ./.scripts/cicd/bootstrap/start-tailscale.sh

      - name: üíæ Restore CLI cache
        uses: actions/cache@v3
        id: cli-cache
        with:
          path: |
            ~/.opentofu
            /usr/local/bin/vault
          key: ${{ runner.os }}-cli-cache-vault-${{ env.VAULT_VERSION }}-tofu-${{ env.TOFU_VERSION }}      

      - name: üí† Install OpenTofu & Vault CLI
        if: steps.cli-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
      
          echo "üì¶ Installing Vault CLI v${VAULT_VERSION}..."
          curl -fsSL https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip -o vault.zip
          unzip -q vault.zip
          sudo install vault /usr/local/bin
          vault --version
      
          echo "üì¶ Installing OpenTofu v${TOFU_VERSION}..."
          curl -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method standalone --opentofu-version $TOFU_VERSION
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.opentofu/bin:$PATH" >> $GITHUB_ENV
          tofu version        

      - name: üîì Authenticate to Vault
        env:
          VAULT_ROLE: bootstrap-runner-ci
        run: bash ./.scripts/cicd/bootstrap/vault-auth.sh

      - name: üîê Rebuild backend config from Vault
        run: |
          set -euo pipefail
          mkdir -p "$ENV_PATH"

          LOCK_PATH=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/consul_state_locking_path)
          LOCK_TOKEN=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/consul_state_locking_token)
          CONSUL_DOMAIN=$(vault kv get -field=value kv/home-ops/consul/domain | sed 's:/*$::')

          echo "path = \"$LOCK_PATH\"" > "$ENV_PATH/backend-consul.hcl"
          echo "address = \"$CONSUL_DOMAIN\"" >> "$ENV_PATH/backend-consul.hcl"

          echo "CONSUL_HTTP_ADDR=$CONSUL_DOMAIN" >> $GITHUB_ENV
          echo "CONSUL_HTTP_TOKEN=$LOCK_TOKEN" >> $GITHUB_ENV
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

      - name: üìÖ Fetch and decode tfplan from Vault
        run: |
          set -euo pipefail
          echo "‚û°Ô∏è Writing plan to $ENV_PATH/tfplan"
          mkdir -p "$ENV_PATH"

          echo "üîë Fetching plan from: $PLAN_PATH"
          vault kv get -field=plan "$PLAN_PATH" | base64 -d > "$ENV_PATH/tfplan"

          echo "‚úÖ Plan saved:"
          ls -lh "$ENV_PATH/tfplan"
          file "$ENV_PATH/tfplan"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          ENV_PATH: ${{ env.ENV_PATH }}
          PLAN_PATH: ${{ env.PLAN_PATH }}

      - name: üîê Pull Proxmox SSH Key from Vault
        run: |
          set -euo pipefail
          echo "üîë Fetching Proxmox SSH key"
          PROXMOX_SSH_KEY=$(vault kv get -field=value kv/home-ops/environment/homelab/$ENV_NAME/secrets/proxmox_ssh_key)
          echo "$PROXMOX_SSH_KEY" > "$ENV_PATH/proxmox.key"
          chmod 600 "$ENV_PATH/proxmox.key"
      
          # ‚úÖ Write temp tfvars so the provider can read the key path
          echo "proxmox_ssh_private_key = \"proxmox.key\"" > "$ENV_PATH/vault.auto.tfvars"
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

      - name: ‚úÖ Apply tfplan
        run: |
          set -euo pipefail
          tofu -chdir="$ENV_PATH" init -backend-config=backend-consul.hcl -reconfigure
          tofu -chdir="$ENV_PATH" apply -auto-approve tfplan 2>&1 | tee apply.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "‚ùå Terraform Apply failed!"
            cat apply.log
            exit $EXIT_CODE
          fi
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
              
      - name: üß™ Run post-provision Ansible (placeholder)
        run: echo "üåü Call Ansible here to finish provisioning..."
        # replace with: ansible-playbook -i <inventory> ./ansible/bootstrap-runner.yml or similar

      - name: üßº Cleanup
        if: always()
        run: |
          rm -f install-opentofu.sh vault.zip "$ENV_PATH/tfplan" "$ENV_PATH/proxmox.key" "$ENV_PATH/vault.auto.tfvars"
